---
- name: Insure temp path exists
  file:
    path: "{{ gcloud_tmp_path }}"
    state: directory

#
# download
#
- name: Download the archive
  get_url:
    url: "{{ gcloud_archive_url }}/{{ gcloud_archive_name }}"
    dest: "{{ gcloud_tmp_path }}/{{ gcloud_archive_name }}"
    force: "{{ gcloud_force_download }}"
  when: gcloud_archive_name != ""

#
# copy from Ansible controller
#
- name: Copy the archive from the Ansible controller
  copy:
    src: "{{ gcloud_archive_path }}"
    dest: "{{ gcloud_tmp_path }}"
  when: gcloud_archive_path != ""

- name: Remove existing google-cloud-sdk dir, it if exists
  file:
      path: "{{ gcloud_install_path }}/google-cloud-sdk"
      state: absent
  when: gcloud_archive_name != ""

- set_fact:
    archive_path: "{{ gcloud_tmp_path + '/' +  gcloud_archive_name }}"
  when: gcloud_archive_name != ""

- set_fact:
    archive_path: "{{ gcloud_tmp_path + '/' + gcloud_archive_path | basename }}"
  when: gcloud_archive_path != ""

- name: Unarchive
  shell: "cd {{ gcloud_install_path }} && tar xvzf {{ archive_path }}"
  when: gcloud_archive_name != ""

- name: Build run script
  template:
    src: "{{ role_path }}/templates/run.j2"
    dest: "{{ gcloud_tmp_path }}/run_install.sh"
    mode: 0755
  tags:
    - copy
    - download

- name: Install
  command: "{{ gcloud_tmp_path }}/run_install.sh"

- name: Remove the archive
  file:
    path: "{{ archive_path }}"
    state: absent

- name: Remove the script
  file:
    path: "{{ gcloud_tmp_path }}/run_install.sh"
    state: absent
  when: not gcloud_debug
